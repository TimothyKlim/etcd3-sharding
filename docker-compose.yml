version: '3.2'
services:
  etcd:
    image: quay.io/coreos/etcd:v3.2
    restart: always
    ports:
    - "2379:2379"
    command: ["/usr/local/bin/etcd",
      "--name", "node1",
      "--initial-advertise-peer-urls", "http://etcd:2380",
      "--listen-peer-urls", "http://0.0.0.0:2380",
      "--advertise-client-urls", "http://etcd:2379",
      "--listen-client-urls", "http://0.0.0.0:2379",
      "--initial-cluster", "node1=http://etcd:2380",
      "--initial-cluster-state", "new",
      "--initial-cluster-token", "etcd-cluster"
    ]

  db:
    image: postgres:10-alpine
    restart: always
    ports:
    - "5432:5432"
    environment:
      POSTGRES_DB: ring

  zookeeper:
    image: confluentinc/cp-zookeeper:4.1.0
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
    ports:
    - "32181:32181"

  kafka:
    image: "confluentinc/cp-kafka:4.1.0"
    restart: always
    ports:
    - "29092:29092"
    depends_on:
    - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:32181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  app_worker:
    # image: "ktimothy/etcd3-sharding:0.1.0-SNAPSHOT"
    build: target/docker/stage
    restart: always
    command: ["/app/bin/app", "worker"]
    depends_on:
    - db
    - kafka
    - etcd
    volumes:
    - "./docker/config:/app/config"

  app_node:
    # image: "ktimothy/etcd3-sharding:0.1.0-SNAPSHOT"
    build: target/docker/stage
    restart: always
    command: ["/node"]
    depends_on:
    - app_worker
    volumes:
    - "./docker/config:/app/config"
    - "./docker/node.sh:/node"
    - "/var/run/docker.sock:/var/run/docker.sock"
